@page "/"
@using AipgOmniworker.OmniController
@rendermode InteractiveServer
@inject GridWorkerController GridWorkerController
@inject BridgeConfigManager BridgeConfigManager
@inject TextWorkerConfigManager TextWorkerConfigManager
@inject OmniControllerMain OmniControllerMain
@inject AphroditeController AphroditeController
@inject ImageWorkerController ImageWorkerController
@inject ImageWorkerConfigManager ImageWorkerConfigManager
@inject UserConfigManager UserConfigManager
@inject ILogger<Home> logger

<PageTitle>Home</PageTitle>

<label for="GridApiKey">Grid Api Key:</label><br/>
<input type="text" id="GridApiKey" @bind="@GridApiKey" /><br/>
If you don't have Grid API Key get one from <a href="https://api.aipowergrid.io/register">https://api.aipowergrid.io/register</a><br/>
<br/>
<label for="ScribeName">Worker name (publicly visible):</label><br/>
<input type="text" id="ScribeName" @bind="@WorkerName" /><br/>
<br/>
<label for="ModelName">Text model Name:</label><br/>
<input type="text" id="ModelName" @bind="@ModelName" /><br/>
<br/>
<label for="HuggingFaceToken">Hugging Face Token:</label><br/>
<input type="text" id="HuggingFaceToken" @bind="@HuggingFaceToken" /><br/>
<br/>

<label for="WorkerType">Worker Type:</label><br/>
<select id="WorkerType" @bind="@WorkerType">
    @foreach (WorkerType workerType in Enum.GetValues(typeof(WorkerType)))
    {
        <option value="@workerType">@workerType</option>
    }
</select>
<br/>

@* <label for="WalletAddress">AIPG Coin Wallet Address:</label><br/> *@
@* <input type="text" id="WalletAddress" @bind="@WalletAddress" /><br/> *@
@* Not sure where to get one? Click <a href="https://aipowergrid.io/wallet">here</a><br/> *@

@* Display status *@
@switch(OmniControllerMain.Status)
{
    case WorkerStatus.Running:
        <div class="alert alert-success" role="alert">
            Worker is running
        </div>
        break;
    case WorkerStatus.Stopped:
        <div class="alert alert-danger" role="alert">
            Worker is stopped
        </div>
        break;
    case WorkerStatus.Starting:
    case WorkerStatus.Stopping:
        <div class="alert alert-warning" role="alert">
            Worker is @OmniControllerMain.Status
        </div>
        break;
}

<button class="btn btn-primary" @onclick="StartWorkers">Save and restart worker</button>
<button class="btn btn-primary" @onclick="StopWorkers">Stop worker</button>

<!-- Disable worker output logs as scrollable readonly text box -->
<textarea class="form-control" rows="20" readonly>@OmniControllerMain.Output.ToOutputString()</textarea>

<br/>
Text worker process output:
<textarea class="form-control" rows="20" readonly>@GridWorkerController.GridTextWorkerOutput.ToOutputString()</textarea>

<br/>
Aphrodite process output:
<textarea class="form-control" rows="20" readonly>@AphroditeController.AphroditeOutput.ToOutputString()</textarea>

<br/>
Image worker process output:
<textarea class="form-control" rows="20" readonly>@ImageWorkerController.Output.ToOutputString()</textarea>
