@page "/"
@using AipgOmniworker.OmniController
@rendermode InteractiveServer
@inject UserConfigManager UserConfigManager
@inject ILogger<Home> Logger
@inject InstancesManager InstancesManager;
@inject InstancesConfigManager InstancesConfigManager;

<PageTitle>Home</PageTitle>

<h3>Global Config</h3>

<label for="GridApiKey">Grid Api Key:</label><br/>
<input type="text" id="GridApiKey" @bind="@GridApiKey" /><br/>
If you don't have Grid API Key get one from <a href="https://api.aipowergrid.io/register">https://api.aipowergrid.io/register</a><br/>
<br/>
<label for="ScribeName">Worker name (publicly visible):</label><br/>
<input type="text" id="ScribeName" @bind="@WorkerName" /><br/>
<br/>
<label for="HuggingFaceToken">Hugging Face Token:</label><br/>
<input type="text" id="HuggingFaceToken" @bind="@HuggingFaceToken" /><br/>
Required for some models, like Llamas. Create HuggingFace account and get one from <a href="https://huggingface.co/settings/tokens">here</a><br/>
<br/>
<label for="AutoUpdateImageWorkers">Initialize and update image workers:</label><br/>
<input type="checkbox" id="AutoUpdateImageWorkers" @bind="@AutoUpdateImageWorkers" /><br/>

@* Named section with a title "Worker Config" *@

<hr />
<h3>Worker Config</h3>

<label for="SelectedInstance">Worker:</label><br/>
<select id="SelectedInstance" @bind="@SelectedInstanceId">
    @foreach (InstanceConfig instanceConfig in InstanceConfigs ?? Array.Empty<InstanceConfig>())
    {
        <option value="@instanceConfig.InstanceId">@instanceConfig.InstanceName</option>
    }
</select>
<br/>

<label for="WorkerType">Worker Type:</label><br/>
<select id="WorkerType" @bind="@WorkerType">
    @foreach (WorkerType workerType in Enum.GetValues(typeof(WorkerType)))
    {
        <option value="@workerType">@workerType</option>
    }
</select>
<br/>

<label for="DeviceType">Device type:</label><br/>
<select id="DeviceType" @bind="@DeviceType">
    @foreach (DeviceType deviceType in Enum.GetValues<DeviceType>())
    {
        if (deviceType == DeviceType.GPU) // Temporarily, since CPU is not supported for now
        {
            <option value="@deviceType">@deviceType</option>
        }
    }
</select>
<br/>

<label for="DevicesIds">Devices to use (comma separated IDs)</label>
<input type="text" id="DevicesIds" @bind="@DevicesIds" /><br/>
<br/>

@if(WorkerType == WorkerType.Auto || WorkerType == WorkerType.Text)
{
    <label for="ModelName">Text model Name:</label><br/>
    <input type="text" id="ModelName" @bind="@TextModelName" /><br/>
    <br/>
}

@* <label for="WalletAddress">AIPG Coin Wallet Address:</label><br/> *@
@* <input type="text" id="WalletAddress" @bind="@WalletAddress" /><br/> *@
@* Not sure where to get one? Click <a href="https://aipowergrid.io/wallet">here</a><br/> *@

@* Display status *@
@switch(OmniControllerMain?.Status ?? WorkerStatus.Stopped)
{
    case WorkerStatus.Running:
        <div class="alert alert-success" role="alert">
            Worker is running
        </div>
        break;
    case WorkerStatus.Stopped:
        <div class="alert alert-danger" role="alert">
            Worker is stopped
        </div>
        break;
    case WorkerStatus.Starting:
    case WorkerStatus.Stopping:
        <div class="alert alert-warning" role="alert">
            Worker is @OmniControllerMain?.Status
        </div>
        break;
}

<button class="btn btn-primary" @onclick="StartWorkers">Save and restart worker</button>
<button class="btn btn-primary" @onclick="StopWorkers">Stop worker</button>

<!-- Disable worker output logs as scrollable readonly text box -->
<textarea class="form-control" rows="20" readonly>@OmniControllerMain?.Output.ToOutputString()</textarea>

<br/>
Text worker process output:
<textarea class="form-control" rows="20" readonly>@_selectedInstance?.GridWorkerController.GridTextWorkerOutput.ToOutputString()</textarea>

<br/>
Aphrodite process output:
<textarea class="form-control" rows="20" readonly>@_selectedInstance?.AphroditeController.AphroditeOutput.ToOutputString()</textarea>

<br/>
Image worker process output:
<textarea class="form-control" rows="20" readonly>@_selectedInstance?.ImageWorkerController.Output.ToOutputString()</textarea>
