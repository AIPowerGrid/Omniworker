@page "/"
@using AipgOmniworker.OmniController
@rendermode InteractiveServer
@inject GridWorkerController GridWorkerController
@inject BridgeConfigManager BridgeConfigManager
@inject TextWorkerConfigManager TextWorkerConfigManager
@inject OmniControllerMain OmniControllerMain
@inject AphroditeController AphroditeController
@inject ImageWorkerController ImageWorkerController
@inject ImageWorkerConfigManager ImageWorkerConfigManager
@inject UserConfigManager UserConfigManager
@inject ILogger<Home> logger

<PageTitle>Home</PageTitle>

<label for="GridApiKey">Grid Api Key:</label><br/>
<input type="text" id="GridApiKey" @bind="@GridApiKey" /><br/>
If you don't have Grid API Key get one from <a href="https://api.aipowergrid.io/register">https://api.aipowergrid.io/register</a><br/>
<br/>
<label for="ScribeName">Worker name (publicly visible):</label><br/>
<input type="text" id="ScribeName" @bind="@WorkerName" /><br/>
<br/>
<label for="ModelName">Text model Name:</label><br/>
<input type="text" id="ModelName" @bind="@ModelName" /><br/>
<br/>
<label for="HuggingFaceToken">Hugging Face Token:</label><br/>
<input type="text" id="HuggingFaceToken" @bind="@HuggingFaceToken" /><br/>
<br/>
<label for="WorkerType">Worker Type:</label><br/>
<select id="WorkerType" @bind="@WorkerType">
    @foreach (WorkerType workerType in Enum.GetValues(typeof(WorkerType)))
    {
        <option value="@workerType">@workerType</option>
    }
</select>
<br/>

@* <label for="WalletAddress">AIPG Coin Wallet Address:</label><br/> *@
@* <input type="text" id="WalletAddress" @bind="@WalletAddress" /><br/> *@
@* Not sure where to get one? Click <a href="https://aipowergrid.io/wallet">here</a><br/> *@

@* Display status *@
@switch(OmniControllerMain.Status)
{
    case WorkerStatus.Running:
        <div class="alert alert-success" role="alert">
            Worker is running
        </div>
        break;
    case WorkerStatus.Stopped:
        <div class="alert alert-danger" role="alert">
            Worker is stopped
        </div>
        break;
    case WorkerStatus.Starting:
    case WorkerStatus.Stopping:
        <div class="alert alert-warning" role="alert">
            Worker is @OmniControllerMain.Status
        </div>
        break;
}

<button class="btn btn-primary" @onclick="StartWorkers">Save and restart worker</button>
<button class="btn btn-primary" @onclick="StopWorkers">Stop worker</button>

<!-- Disable worker output logs as scrollable readonly text box -->
<textarea class="form-control" rows="20" readonly>@OmniControllerMain.Output.ToOutputString()</textarea>

<br/>
Text worker process output:
<textarea class="form-control" rows="20" readonly>@GridWorkerController.GridTextWorkerOutput.ToOutputString()</textarea>

<br/>
Aphrodite process output:
<textarea class="form-control" rows="20" readonly>@AphroditeController.AphroditeOutput.ToOutputString()</textarea>

<br/>
Image worker process output:
<textarea class="form-control" rows="20" readonly>@ImageWorkerController.Output.ToOutputString()</textarea>

@code {
    private string? GridApiKey { get; set; }
    private string? WorkerName { get; set; }
    private string? ModelName { get; set; }
    private string? HuggingFaceToken { get; set; }
    private string? WalletAddress { get; set; }
    private WorkerType WorkerType { get; set; } = WorkerType.Auto;
    
    protected override async Task OnInitializedAsync()
    {
        OmniControllerMain.StateChangedEvent += (_, _) => InvokeAsync(StateHasChanged);

        try
        {
            var userConfig = await UserConfigManager.LoadConfig();
            GridApiKey = userConfig.ApiKey;
            WorkerName = userConfig.WorkerName;
            ModelName = userConfig.TextModelName;
            HuggingFaceToken = userConfig.HuggingFaceToken;
            WorkerType = userConfig.WorkerType;
        }
        catch (Exception e)
        {
            OmniControllerMain.Output.Add(e.ToString());
            logger.LogError(e, "Failed to load user config");
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        await SaveUserConfig();
    }

    private async Task SaveUserConfig(bool? setAutostart = null)
    {
        try
        {
            UserConfig userConfig = await UserConfigManager.LoadConfig();
            userConfig.ApiKey = GridApiKey;
            userConfig.WorkerName = WorkerName;
            userConfig.TextModelName = ModelName;
            userConfig.HuggingFaceToken = HuggingFaceToken;
            userConfig.WorkerType = WorkerType;
            
            if (setAutostart.HasValue)
            {
                userConfig.AutoStartWorker = setAutostart.Value;
            }
            
            await UserConfigManager.SaveConfig(userConfig);
        }
        catch (Exception e)
        {
            OmniControllerMain.Output.Add("Failed to save user config");
            OmniControllerMain.Output.Add(e.ToString());
            logger.LogError(e, "Failed to save user config");
        }
    }

    private async Task StartWorkers()
    {
        if (string.IsNullOrWhiteSpace(ModelName))
        {
            OmniControllerMain.Output.Add("Model Name is required!");
            return;
        }

        if (string.IsNullOrWhiteSpace(GridApiKey))
        {
            OmniControllerMain.Output.Add("Grid API Key is required!");
            return;
        }

        if (string.IsNullOrWhiteSpace(WorkerName))
        {
            OmniControllerMain.Output.Add("Worker Name is required!");
            return;
        }

        await SaveUserConfig(true);
        await OmniControllerMain.ApplyUserConfigsToWorkers();
        await OmniControllerMain.SaveAndRestart();
    }

    private async Task StopWorkers()
    {
        await OmniControllerMain.StopWorkers();
    }
}
